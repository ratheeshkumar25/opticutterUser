// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: material.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MaterialService_FindMaterialByID_FullMethodName = "/pb.MaterialService/FindMaterialByID"
	MaterialService_FindAllMaterial_FullMethodName  = "/pb.MaterialService/FindAllMaterial"
	MaterialService_AddItem_FullMethodName          = "/pb.MaterialService/AddItem"
	MaterialService_FindItemByID_FullMethodName     = "/pb.MaterialService/FindItemByID"
	MaterialService_FindAllItem_FullMethodName      = "/pb.MaterialService/FindAllItem"
	MaterialService_EditItem_FullMethodName         = "/pb.MaterialService/EditItem"
	MaterialService_RemoveItem_FullMethodName       = "/pb.MaterialService/RemoveItem"
	MaterialService_PlaceOrder_FullMethodName       = "/pb.MaterialService/PlaceOrder"
	MaterialService_OrderHistory_FullMethodName     = "/pb.MaterialService/OrderHistory"
	MaterialService_FindOrder_FullMethodName        = "/pb.MaterialService/FindOrder"
)

// MaterialServiceClient is the client API for MaterialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Material Service
type MaterialServiceClient interface {
	// Service to handle material management
	FindMaterialByID(ctx context.Context, in *MaterialID, opts ...grpc.CallOption) (*Material, error)
	FindAllMaterial(ctx context.Context, in *MaterialNoParams, opts ...grpc.CallOption) (*MaterialList, error)
	// Service to handle item management
	AddItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemResponse, error)
	FindItemByID(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*Item, error)
	FindAllItem(ctx context.Context, in *ItemNoParams, opts ...grpc.CallOption) (*ItemList, error)
	EditItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error)
	RemoveItem(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*ItemResponse, error)
	// Service to handle orders
	PlaceOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OrderResponse, error)
	OrderHistory(ctx context.Context, in *ItemNoParams, opts ...grpc.CallOption) (*OrderList, error)
	FindOrder(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*Order, error)
}

type materialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaterialServiceClient(cc grpc.ClientConnInterface) MaterialServiceClient {
	return &materialServiceClient{cc}
}

func (c *materialServiceClient) FindMaterialByID(ctx context.Context, in *MaterialID, opts ...grpc.CallOption) (*Material, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Material)
	err := c.cc.Invoke(ctx, MaterialService_FindMaterialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) FindAllMaterial(ctx context.Context, in *MaterialNoParams, opts ...grpc.CallOption) (*MaterialList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaterialList)
	err := c.cc.Invoke(ctx, MaterialService_FindAllMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) AddItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, MaterialService_AddItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) FindItemByID(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*Item, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Item)
	err := c.cc.Invoke(ctx, MaterialService_FindItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) FindAllItem(ctx context.Context, in *ItemNoParams, opts ...grpc.CallOption) (*ItemList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemList)
	err := c.cc.Invoke(ctx, MaterialService_FindAllItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) EditItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Item)
	err := c.cc.Invoke(ctx, MaterialService_EditItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) RemoveItem(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*ItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, MaterialService_RemoveItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) PlaceOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, MaterialService_PlaceOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) OrderHistory(ctx context.Context, in *ItemNoParams, opts ...grpc.CallOption) (*OrderList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderList)
	err := c.cc.Invoke(ctx, MaterialService_OrderHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) FindOrder(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, MaterialService_FindOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaterialServiceServer is the server API for MaterialService service.
// All implementations must embed UnimplementedMaterialServiceServer
// for forward compatibility.
//
// Material Service
type MaterialServiceServer interface {
	// Service to handle material management
	FindMaterialByID(context.Context, *MaterialID) (*Material, error)
	FindAllMaterial(context.Context, *MaterialNoParams) (*MaterialList, error)
	// Service to handle item management
	AddItem(context.Context, *Item) (*ItemResponse, error)
	FindItemByID(context.Context, *ItemID) (*Item, error)
	FindAllItem(context.Context, *ItemNoParams) (*ItemList, error)
	EditItem(context.Context, *Item) (*Item, error)
	RemoveItem(context.Context, *ItemID) (*ItemResponse, error)
	// Service to handle orders
	PlaceOrder(context.Context, *Order) (*OrderResponse, error)
	OrderHistory(context.Context, *ItemNoParams) (*OrderList, error)
	FindOrder(context.Context, *ItemID) (*Order, error)
	mustEmbedUnimplementedMaterialServiceServer()
}

// UnimplementedMaterialServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMaterialServiceServer struct{}

func (UnimplementedMaterialServiceServer) FindMaterialByID(context.Context, *MaterialID) (*Material, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMaterialByID not implemented")
}
func (UnimplementedMaterialServiceServer) FindAllMaterial(context.Context, *MaterialNoParams) (*MaterialList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllMaterial not implemented")
}
func (UnimplementedMaterialServiceServer) AddItem(context.Context, *Item) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedMaterialServiceServer) FindItemByID(context.Context, *ItemID) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindItemByID not implemented")
}
func (UnimplementedMaterialServiceServer) FindAllItem(context.Context, *ItemNoParams) (*ItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllItem not implemented")
}
func (UnimplementedMaterialServiceServer) EditItem(context.Context, *Item) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditItem not implemented")
}
func (UnimplementedMaterialServiceServer) RemoveItem(context.Context, *ItemID) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItem not implemented")
}
func (UnimplementedMaterialServiceServer) PlaceOrder(context.Context, *Order) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedMaterialServiceServer) OrderHistory(context.Context, *ItemNoParams) (*OrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderHistory not implemented")
}
func (UnimplementedMaterialServiceServer) FindOrder(context.Context, *ItemID) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOrder not implemented")
}
func (UnimplementedMaterialServiceServer) mustEmbedUnimplementedMaterialServiceServer() {}
func (UnimplementedMaterialServiceServer) testEmbeddedByValue()                         {}

// UnsafeMaterialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaterialServiceServer will
// result in compilation errors.
type UnsafeMaterialServiceServer interface {
	mustEmbedUnimplementedMaterialServiceServer()
}

func RegisterMaterialServiceServer(s grpc.ServiceRegistrar, srv MaterialServiceServer) {
	// If the following call pancis, it indicates UnimplementedMaterialServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MaterialService_ServiceDesc, srv)
}

func _MaterialService_FindMaterialByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).FindMaterialByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_FindMaterialByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).FindMaterialByID(ctx, req.(*MaterialID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_FindAllMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialNoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).FindAllMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_FindAllMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).FindAllMaterial(ctx, req.(*MaterialNoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).AddItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_FindItemByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).FindItemByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_FindItemByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).FindItemByID(ctx, req.(*ItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_FindAllItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemNoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).FindAllItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_FindAllItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).FindAllItem(ctx, req.(*ItemNoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_EditItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).EditItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_EditItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).EditItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_RemoveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).RemoveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_RemoveItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).RemoveItem(ctx, req.(*ItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_PlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).PlaceOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_OrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemNoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).OrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_OrderHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).OrderHistory(ctx, req.(*ItemNoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_FindOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).FindOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_FindOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).FindOrder(ctx, req.(*ItemID))
	}
	return interceptor(ctx, in, info, handler)
}

// MaterialService_ServiceDesc is the grpc.ServiceDesc for MaterialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaterialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MaterialService",
	HandlerType: (*MaterialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMaterialByID",
			Handler:    _MaterialService_FindMaterialByID_Handler,
		},
		{
			MethodName: "FindAllMaterial",
			Handler:    _MaterialService_FindAllMaterial_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _MaterialService_AddItem_Handler,
		},
		{
			MethodName: "FindItemByID",
			Handler:    _MaterialService_FindItemByID_Handler,
		},
		{
			MethodName: "FindAllItem",
			Handler:    _MaterialService_FindAllItem_Handler,
		},
		{
			MethodName: "EditItem",
			Handler:    _MaterialService_EditItem_Handler,
		},
		{
			MethodName: "RemoveItem",
			Handler:    _MaterialService_RemoveItem_Handler,
		},
		{
			MethodName: "PlaceOrder",
			Handler:    _MaterialService_PlaceOrder_Handler,
		},
		{
			MethodName: "OrderHistory",
			Handler:    _MaterialService_OrderHistory_Handler,
		},
		{
			MethodName: "FindOrder",
			Handler:    _MaterialService_FindOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "material.proto",
}
